// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // for local development
  url      = env("DATABASE_URL")
  // for Vercel
 // url       = env("POSTGRES_URL_NON_POOLING")
 // directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  USER
  ADMIN
  VENDOR
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  password     String
  role         Role      @default(USER)
  grindzMood   Mood?     @relation(fields: [grindzMoodId], references: [id])
  grindzMoodId Int?
  allergies    Allergy[] @relation("UserAllergies")
  eatery       Eatery? 
  waterLogs  WaterLog[]
  plannerEntries PlannerEntry[]
}

enum Condition {
  excellent
  good
  fair
  poor
}

model Stuff {
  id        Int       @id @default(autoincrement())
  name      String
  quantity  Int
  condition Condition @default(good)
  owner     String
}

enum EateryType {
  RETAIL_DINING
  RESIDENTIAL_DINING
  FOOD_TRUCK
}

enum EaterySubtype {
  MEAL_POINTS_ACCEPTED
  MEAL_POINTS_NOT_ACCEPTED
}

model Eatery {
  id       Int           @id @default(autoincrement())
  keywords String
  type     EateryType
  subtype  EaterySubtype
  name     String        @unique
  location String
  room     String?
  floor    String
  hours    String
  phone    String
  email    String?
  website  String
  notes    String?
  x        Float
  y        Float
  user     User?         @relation(fields: [userId], references: [id])
  userId   Int?          @unique
  items    VendorItem[]  // New: menu items for this eatery
}

model VendorItem {
  id          Int     @id @default(autoincrement())
  name        String
  image       String
  alt         String
  calories    Int
  fat         Int
  carbs       Int
  protein     Int 
  eatery      Eatery  @relation(fields: [eateryId], references: [id])
  eateryId    Int
  allergies   Allergy[] @relation("VendorItemAllergies")
}

enum VendingType {
  SNACK
  BEVERAGE
}

model VendingMachine {
  id       Int         @id @default(autoincrement())
  type     VendingType
  location String
  hours    String
  floor    String
  x        Float
  y        Float
}

model Allergy {
  id    Int             @id @default(autoincrement())
  name  String          @unique
  users User[]          @relation("UserAllergies")
  dashboardItems DashboardItem[] @relation("DashboardItemAllergies")
  vendorItems    VendorItem[]    @relation("VendorItemAllergies")
}

model Mood {
  id    Int             @id @default(autoincrement())
  name  String          @unique
  users User[]          // Users who selected this mood
  items DashboardItem[] // Meals/items associated with this mood
}

model DashboardItem {
  id        Int       @id @default(autoincrement())
  name      String
  image     String
  alt       String
  source    String
  nutrition String
  mood      Mood      @relation(fields: [moodId], references: [id])
  moodId    Int
  allergies Allergy[] @relation("DashboardItemAllergies")
}

model WaterLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  date      DateTime
  count     Int      @default(0)

  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, date]) // 1 log per user per day
}

model PlannerEntry {
  id        Int      @id @default(autoincrement())
  userId    Int
  day       String
  mealType  String
  meal      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}