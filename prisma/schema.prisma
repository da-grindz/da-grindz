generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL_NON_POOLING")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  password     String
  role         Role           @default(USER)
  grindzMoodId Int?
  eatery       Eatery?
  PlannerEntry PlannerEntry[]
  grindzMood   Mood?          @relation(fields: [grindzMoodId], references: [id])
  waterLogs    WaterLog[]
  allergies    Allergy[]      @relation("UserAllergies")
}

model Stuff {
  id        Int       @id @default(autoincrement())
  name      String
  quantity  Int
  condition Condition @default(good)
  owner     String
}

model Eatery {
  id       Int           @id @default(autoincrement())
  keywords String
  type     EateryType
  subtype  EaterySubtype
  name     String        @unique
  location String
  room     String?
  floor    String
  hours    String
  phone    String
  email    String?
  website  String
  notes    String?
  x        Float
  y        Float
  userId   Int?          @unique
  user     User?         @relation(fields: [userId], references: [id])
  items    VendorItem[]
}

model VendorItem {
  id          Int       @id @default(autoincrement())
  name        String
  image       String
  alt         String
  eateryId    Int
  calories    Int
  carbs       Int
  fat         Int
  protein     Int
  description String    @default("No description provided")
  price       Float     @default(0.0)
  eatery      Eatery    @relation(fields: [eateryId], references: [id])
  allergies   Allergy[] @relation("VendorItemAllergies")
}

model VendingMachine {
  id       Int         @id @default(autoincrement())
  type     VendingType
  location String
  hours    String
  floor    String
  x        Float
  y        Float
}

model Allergy {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  dashboardItems DashboardItem[] @relation("DashboardItemAllergies")
  users          User[]          @relation("UserAllergies")
  vendorItems    VendorItem[]    @relation("VendorItemAllergies")
}

model Mood {
  id    Int             @id @default(autoincrement())
  name  String          @unique
  items DashboardItem[]
  users User[]
}

model DashboardItem {
  id        Int       @id @default(autoincrement())
  name      String
  image     String
  alt       String
  source    String
  nutrition String
  moodId    Int
  mood      Mood      @relation(fields: [moodId], references: [id])
  allergies Allergy[] @relation("DashboardItemAllergies")
}

model WaterLog {
  id     Int      @id @default(autoincrement())
  userId Int
  date   DateTime
  count  Int      @default(0)
  user   User     @relation(fields: [userId], references: [id])

  @@unique([userId, date])
}

model PlannerEntry {
  id        Int      @id @default(autoincrement())
  userId    Int
  day       String
  mealType  String
  meal      String
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
  VENDOR
}

enum Condition {
  excellent
  good
  fair
  poor
}

enum EateryType {
  RETAIL_DINING
  RESIDENTIAL_DINING
  FOOD_TRUCK
}

enum EaterySubtype {
  MEAL_POINTS_ACCEPTED
  MEAL_POINTS_NOT_ACCEPTED
}

enum VendingType {
  SNACK
  BEVERAGE
}
